@function parse-int($n) {
    @return $n / ($n * 0 + 1);
}

@function unit-convert($values) {
    $list: ();
    @each $value in $values {
        @if (type-of($value) == number) and ($value != 0) {
            $spt: unit($value);
            $val: parse-int($value);
            @if $get-px and $spt == rem {
                $list: append($list, ($val*16) + px);
            } @else if $spt == rem {
                $list: append($list, ($val*16) + px);
            } @else if $spt == px {
                $list: append($list, ($val/16) + rem);
            } @else {
                @warn 'There is no unit conversion for #{$spt}';
            }

        } @else {
            $list: append($list, $value);
        }
    }
    @return $list();
}

@function lock-calc($min-size, $max-size, $min-width, $max-width) {
    $size-delta: parse-int($max-size - $min-size);
    $viewport-delta: parse-int($max-width - $min-width);
    $size-slope: $size-delta / $viewport-delta;
    $viewport-increase: $size-slope*100#{vw};
    $zero-size: $min-size - $size-slope * $min-width;

    @return calc(#{$viewport-increase} + #{$zero-size});
}

@function glyph-x-height($font-family) {
    @if ($font-family == 'Eurostile') {
        @return 0.6;
    } @else if ($font-family == 'Forma-Text') or ($font-family == 'Forma-Micro') {
        @return 0.702;
    }
    @return 0.725;
}

// Returns the luminance of `$color` as a float (between 0 and 1)
// 1 is pure white, 0 is pure black
// @param {Color} $color - Color
// @return {Number}
// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef Reference
@function luminance($color) {
    $rgb: (
        'red': red($color),
        'green': green($color),
        'blue': blue($color)
    );
    @return ceil(((map-get($rgb, 'red') * 0.2126) + (map-get($rgb, 'green') * 0.7152) + (map-get($rgb, 'blue') * 0.0722)) * 100/255);    
}

// color tint & shade functions
@function tint($color, $percentage) {
    @return mix(#FFF, $color, $percentage);
}

@function shade($color, $percentage) {
    @return mix(#000, $color, $percentage);
}

// color tint & shade functions based on MÃ¼ller Theory 
// link: http://www.colourlovers.com/blog/2007/09/02/the-muller-formula-or-predictable-color-preferences
@function tint-chroma($color, $percentage) {
    // @return mix(#FFF, adjust-hue($color, (luminance(grayscale($color))) - (luminance(grayscale(mix(#000, $color, $percentage))))), $percentage);
    @if hue($color) < 240 and hue($color) > 60 {
        @return tint(adjust-hue($color, ((luminance($color)-(luminance(tint($color, $percentage)))))), $percentage);    
    }
    @return tint(adjust-hue($color, ((luminance($color)-(luminance(shade($color, $percentage)))))), $percentage);    
}

@function shade-chroma($color, $percentage) {
    // @return mix(#000, adjust-hue($color, (luminance(grayscale($color))) - (luminance(grayscale(mix(#FFF, $color, $percentage))))), $percentage);
    @if hue($color) < 240 and hue($color) > 60 {
        @return shade(adjust-hue($color, ((luminance($color)-(luminance(shade($color, $percentage)))))), $percentage);    
    }
    @return shade(adjust-hue($color, ((luminance($color)-(luminance(tint($color, $percentage)))))), $percentage);    
}

// a better way to determine if a color is "light" or "dark" (https://github.com/timhettler/compass-yiq-color-contrast)
@function color-contrast($color) {
    @if (yiq-is-light($color, 128)) {
        @return shade($color, 90);
    } @else {
        @return tint($color, 90);
    }
}
