@mixin font-face($woff2, $font-family, $font-filename, $font-weight: normal, $font-style: normal, $font-path: './') {
    @if $woff2 == null {
        @font-face {
            font-family: '#{$font-family}';
            src: url('#{$font_path}#{$font_filename}.eot');
            src: local('\2660'),
                url('#{$font_path}#{$font_filename}.woff') format('woff'), 
                url('#{$font_path}#{$font_filename}.ttf') format('truetype');
            font: {
                weight: $font-weight;
                style: $font_style;
            }
        }
    } @else {
        @font-face {
            font-family: '#{$font-family}';
            src: url('#{$font_path}#{$font_filename}.eot');
            src: local('\2660'),
                url('#{$font_path}#{$font_filename}.woff2') format('woff2'), 
                url('#{$font_path}#{$font_filename}.woff') format('woff'), 
                url('#{$font_path}#{$font_filename}.ttf') format('truetype');
            font: {
                weight: $font-weight;
                style: $font_style;
            }
        }
    }
}

@mixin ms-font($font-weight, $font-family, $font-stack, $font-size, $baseline-divisions: 4, $value1: null, $value2: null) {
    $cap_height:         X-height($font-family);
    $baseline-step:      $default-line-height * $font-size / $baseline-divisions;
    $lines:              ceil(($font-size + (($font-size + .1) / ($font-size * 100))) / $baseline-step);
    $line_height:        $baseline-step * $lines / $font-size;
    $baseline_distance:  ($line_height - $cap_height) / 2;

    @if $value1 == null and $value2 == null {
        @if $old-IE {
            font-family: $font-family, $font-stack;
            font-size: $font-size;
            font-weight: $font-weight;
            line-height: $line_height;
        } @else {
            font: $font-weight #{$font-size}/#{$line_height} $font-family, $font-stack;
        }
    } @else if $value1 == null {
        @if $old-IE {
            font-family: $font-family, $font-stack;
            font-size: $font-size;
            font-weight: $font-weight;
            line-height: $line_height;
        } @else {
            font: $font-weight #{$font-size}/#{$line_height} $font-family, $font-stack;
        }
        @if $get-px {
            #{$value2}: ($baseline_distance * $pixel-base + px);
        } @else {
            #{$value2}: ($baseline_distance + rem);
        }
    } @else if $value2 == null {
        @if $old-IE {
            font-family: $font-family, $font-stack;
            font-size: $font-size;
            font-weight: $font-weight;
            line-height: $line_height;
        } @else {
            font: $font-weight #{$font-size}/#{$line_height} $font-family, $font-stack;
        }
        @if $get-px {
            #{$value1}: (($line_height - $baseline_distance) * $pixel-base + px);
        } @else {
            #{$value1}: ($line_height - $baseline_distance + rem);
        }
    } @else {
        @if $old-IE {
            font-family: $font-family, $font-stack;
            font-size: $font-size;
            font-weight: $font-weight;
            line-height: $line_height;
        } @else {
            font: $font-weight #{$font-size}/#{$line_height} $font-family, $font-stack;
        }
        @if $get-px {
            #{$value1}: (($line_height - $baseline_distance) * $pixel-base + px);
            #{$value2}: ($baseline_distance * $pixel-base + px);
        } @else {
            #{$value1}: ($line_height - $baseline_distance + rem);
            #{$value2}: ($baseline_distance + rem);
        }
    }
}

@mixin font-smoothing($value: on) {
    @if $value == on {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    @else {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}

@mixin silent-class($class-name) {
    .#{$class-name},
    %#{$class-name} {
        @content;
    }
}

@mixin selection {
    ::-moz-selection { @content; }
    ::selection { @content; }
}

@mixin units($property, $values) {
    $px : ();
    $rem: ();

    @each $value in $values {

        @if $value == 0 or type-of($value) != "number" or unit($value) != "rem" or unit($value) != "px" {
            $px : append($px , $value);
            $rem: append($rem, $value);
        }

        @else { 
            $unit: unit($value);
            $val: parseInt($value);

            @if $unit == "px" {
                $px : append($px,  $value);
                $rem: append($rem, ($val / 16 + rem));
            }

            @if $unit == "rem" {
                $px : append($px,  ($val * 16 + px));
                $rem: append($rem, $value);
            }
        }
    }

    @if $px == $rem {
        #{$property}: $rem;
    } @else {
        #{$property}: $rem;
        html.no-cssremunit & {
            #{$property}: $px;
        }
    }
}

// Clearfix

@mixin cf() {
    & {
        *zoom: 1;
    }
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

// Generate color ranges for a list of classes

@mixin color-range($color, $color-val, $degrees: 360, $classes: ()) {
    $offset: $degrees / length($classes);
    $color-range: ();
    @for $i from 1 through length($classes) {
        $color-range: (adjust-hue($color, $offset * $i)); 
        .#{nth($classes, $i)} {
            #{$color-val}: $color-range;
        }
    }
}

// Keyframe Mixin - adds vendor prefixes to keyframes

@mixin keyframe($name) {
    @keyframes #{$name} {
        @content;
    }
}

// Animation Mixin

@mixin animation($name, $duration, $function, $delay, $count, $direction, $mode, $state) {
    animation-name: $name;                  // animation name
    animation-duration: $duration;          // .5s
    animation-timing-function: $function;   // ease-in-out
    animation-delay: $delay;                // 0s
    animation-iteration-count: $count;      // infinite | <number>
    animation-direction: $direction;        // normal | reverse | alternate | alternate-reverse
    animation-fill-mode: $mode;             // none | forwards | backwards | both
    animation-play-state: $state;           // running | paused
}

// Background Gradients

@mixin linear-gradient($colors-stops: (), $deg: 180) {
    background: linear-gradient(unquote("#{$deg}deg"), $colors-stops);
}

@mixin gradient($color1, $color2, $stop1: 0, $stop2: 100%, $deg: 180deg) {
    background: linear-gradient($deg, $color1, $color1 $stop1, $color2 $stop1, $color2 $stop2);
}
